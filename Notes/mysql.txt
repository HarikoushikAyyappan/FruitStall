MYSQL database
*MYSQL  is a Relational Database Management System used to store and manipulate data which is in the form of tables,rows and coloumns
*MySQl is based on structured query language which is used for handling data.
*MYSQL is fast and it implements database operations on tables,rows ,coloumns and indexes.
*it allows us to obtain a relationship between rows and coloumns of various tables and it uses various sql queries to provide the end
user valuable information.
Working of MYSQL:
*MYSQL follows Client-Server Architecture.
*Core component of MYSQL is MYSQL Server .MYSQL creates a Database . Client gives request through Graphical User Interface.One of
GUI is MYSQL Workbench that we use.
*Server responds to the requests provided and provides the necessary output.
*Some of the advantages of MYSQL is *It is easy to use
                                    *It is fast and scalable
                                    *Easy to download and configure
                                    *Client-Server model
                                    *Platform independency and ability to be compatible with many Operating System
                                    *High performance in terms of memory efficiency etc..
Creating new Schema in Workbench:
*Schema can be created in two ways 1.By using command line client 2. using Workbench
*Using Workbench,Schema is created by clicking new schema in schema menu. After providing name of database, if we refresh, new schema
is created. In schema menu, we will be able to see the schema that we created. By clicking "i" near the name of schema ,we will be
knowing the details of schema. and we will have subgroups like Tables,views and functions etc under the schema that is created.
*we have commands like USE ,SHOW to work on the database that we created.
Creating new Table in Schema:
*Tables help organization of data into rows,coloumns and it stores and displays data in organized manner.
*A Table creation command requires 1.Name of the Table, 2.Name of Fields 3.Definition for each Fields.
*Creation of Table can be done in two ways
        1. By command line client
                    *The command CREATE TABLE is used to create table .
        Syntax:         CREATE TABLE [IF NOT EXISTS] table_name(
                        column_definition1,
                        column_definition2,
                        ........,
                        table_constraints
                    );
        *The database name should be unique, we will give name of the coloumns along with the datatype of th the coloumn
        , the table constraints specifies primarykey,Foreign key,Unique Key,Check etc.
                *Syntax of coloumn definition column_name1 data_type(size) [NULL | NOT NULL]
         * the command SHOW table_name and DESCRIBE table_name are used to bet insights about the table.
         2.Using Workbench
                    *By clicking on the schema that we created, it shows suboptions like tables ,views etc..From that click
                    Tables,Right click and select Create a table. Provide the name of the table,name of the coloumn along
                    with datatype and details about NOTNULL,Primary Key,AutoIncremental etc and click Apply and the table created
                    could be seen.
 MYSQL Queries:
        *some commonly used MYSQL Queries are INSERT,SELECT,UPDATE ,DELETE which can be used with database,tables and records.
        *create database database_name;->creates a database
        *use database_name;->used to do create tables and other database objects.
        *SHOW DATABASES->shows the list of databases created.
        *MySQL create query->  used to create a table, view, procedure and function.
        *MySQL alter query -> is used to add, modify, delete or drop columns of a table.
                *Adding coloumn in the table:
                    Syntax: ALTER TABLE table_name
                           ADD new_column_name column_definition
                          [ FIRST | AFTER column_name ];
                *Adding multiple coloumns in the table:
                    Syntax: ALTER TABLE table_name
                            ADD new_column_name column_definition
                            [ FIRST | AFTER column_name ],
                           ADD new_column_name column_definition
                           [ FIRST | AFTER column_name ],
                             ...
                           ;
                *Modifying coloumn in a table:
                        It is used to modify coloumn definition of a table.
                        Syntax:ALTER TABLE table_name
                               MODIFY column_name column_definition
                               [ FIRST | AFTER column_name ];
                *Drop coloumn in a table:
                        It drops a coloumn from a table.
                        Syntax:ALTER TABLE table_name
                               DROP COLUMN column_name;
                *Rename coloumn in a Table:
                        It changes the name of a coloumn in a table.
                        Syntax:ALTER TABLE table_name
                               CHANGE COLUMN old_name new_name
                               column_definition
                               [ FIRST | AFTER column_name ]
                *Rename Table:
                        Syntax:ALTER TABLE table_name
                               RENAME TO new_table_name;
        *MySQL Insert Query:
                        It is used to insert data in Table by either adding values to single row or adding values in multiple
                        rows.
                        Syntax:INSERT INTO table_name ( field1, field2,...fieldN )
                               VALUES
                               ( value1, value2,...valueN );
                        We can also add multiple values like
                        Syntax:INSERT INTO table_name VALUES
                        ( value1, value2,...valueN )
                        ( value1, value2,...valueN )
                        ...........
                        ( value1, value2,...valueN );
                       We can also add or store data for selected fields like
                       Syntax:INSERT INTO table_name (field1, field2)
                              VALUES ('value1', 'value2'), ('value1', 'value2');
                       We can also make MysQL show the records of a particular table using
                       Syntax:mysql> SELECT * FROM Table_name
               Insert Date in MySQL table:
                       We can insert Date as YYYY-MM-DD which is the default format.
                       INSERT INTO table_name (column_name, column_date) VALUES ('DATE: Manual Date', 'YYYY-MM-DD');
                       If we want to insert date in mm/dd/yyyy format then
                       INSERT INTO table_name VALUES (STR_TO_DATE(date_value, format_specifier));
        MySQL Update Query:
                       Used to moDify the data in SQL table
                       Used along with SET and WHERE clauses,SET is used to change the value and WHERE is used to
                       specify where we need to do updation.
                       The update command in MySQL supports modifiers namely
                         LOW_PRIORITY:It halts the update till any other client reads from the table.it works for storage
                         engines that use only table level locking.
                         IGNORE:it makes the statement execute even if some error occured.If it finds any duplicate key
                         data will not be updated.
                         Syntax:UPDATE [LOW_PRIORITY] [IGNORE] table_name
                                    SET column_assignment_list
                                    [WHERE condition]
        MySQL Delete Query:
                       *Used to delete the records from mysql table that is not needed.
                       *It is possible to delete more than one record at a time.
                       *If a record is deleted,it cant be regained again,so it is advisable to create a backup of the database.
                       Syntax:DELETE FROM table_name WHERE condition;
                       *If we want to delete records from multiple table using single delete query,JOIN statement is used with
                       delete statement.
                       *If we want to delete all records from a table without knowing the number of records deleted,TRUNCATE
                       statement performs good.
                MySQL Delete and Limit clause:
                      *Used to limit the returns of result from a record.
                      Syntax:DELETE FROM table_name
                             WHERE condition
                             ORDER BY colm1, colm2, ...
                             LIMIT row_count;
        MySQL Select Query:
                      *Used to fetch data from one or more tables and get data from all fields or the fields which match specified
                      condition.
                      *Can be used across platforms such PHP etc.
                      *Syntax:SELECT field_name1, field_name 2,... field_nameN
                              FROM table_name1, table_name2...
                              [WHERE condition]
                              [GROUP BY field_name(s)]
                              [HAVING condition]
                              [ORDER BY field_name(s)]
                              [OFFSET M ][LIMIT N];
                      *Syntax for all fields without condition:
                            SELECT * FROM tables [WHERE conditions]
                            [GROUP BY fieldName(s)]
                            [HAVING condition]
                            [ORDER BY fieldName(s)]
                            [OFFSET M ][LIMIT N];
        UNIQUE KEY:
                     *It is a field or combination of fields which ensure only unique element can be stored in a particular
                     coloumn(s).
                     *MySQL allows two coloumns have unique key constraints.It can accept null values but there could be
                     only one null value per coloumn.
                     *Syntax:CREATE TABLE table_name(
                                 col1 datatype,
                                 col2 datatype UNIQUE,
                                 ...
                             );
                     *If we want to make more than one coloumn as unique,
                     Syntax:CREATE TABLE table_name(
                              col1 col_definition,
                              col2 col_definition,
                              ...
                              [CONSTRAINT constraint_name]
                              UNIQUE(column_name(s))
                            );
                     It is advisable to give the constraint name as unique in above syntax or it takes the constraint name
                     automatically.
                     *The syntax ALTER TABLE table_name  DROP INDEX constraint_name;  is used to drop a unique name.
                     *The syntax for creating constraint using Alter query is,
                             ALTER TABLE table_name ADD CONSTRAINT constraint_name UNIQUE(column_list);
        PRIMARY KEY:
                     *Used to identify each record in a table uniquely.
                     *If a coloumn contains Primary key constraints,it cannot be null or empty.
                     *If a new record is created,Primary key uses AUTO_INCREMENT to increment its value.
                     *Syntax with CREATE Query is,
                     CREATE TABLE table_name(
                         col1 datatype PRIMARY KEY,
                         col2 datatype,
                         ...
                     );
                     *Syntax for creating more than one PrimaryKey coloumn,
                     CREATE TABLE table_name
                     (
                       col1 col_definition,
                       col2 col_definition,
                       ...

                       CONSTRAINT [constraint_name]
                        PRIMARY KEY (column_name(s))
                     );
                     *Syntax for creating ALTER Query
                     ALTER TABLE table_name ADD PRIMARY KEY(column_list);
                     *Syntax for dropping Primary Key is given by,
                     ALTER TABLE table_name  DROP PRIMARY KEY;
        FOREIGN KEY:
                     *Used to link more than one table.
                     *Also called Reference key ie) Foreign key field in one table refers to Primary key field of another table.
                     *Syntax for CREATE and ALTER Query:[CONSTRAINT constraint_name]
                                                         FOREIGN KEY [foreign_key_name] (col_name, ...)
                                                         REFERENCES parent_tbl_name (col_name,...)
                                                         ON DELETE referenceOption
                                                         ON UPDATE referenceOption
                     *The Reference options are CASCADE,SETNULL,SETDEFAULT,RESTRICT,NOACTION.
                     *Dropping Foreign key:
                     ALTER TABLE table_name DROP FOREIGN KEY fk_constraint_name;
                     *Syntax for ALTER Query:
                     ALTER TABLE table_name
                         ADD [CONSTRAINT [symbol]] FOREIGN KEY
                         [index_name] (column_name, ...)
                         REFERENCES table_name (column_name,...)
                         ON DELETE referenceOption
                         ON UPDATE referenceOption

        Composite Key:
                     *To make a row unique,two or more coloumns are combined and made as a key called Composite Key.
                     *Syntax for CREATE Query:
                     CREATE TABLE Product (
                         field1 int NOT NULL,
                         field2 varchar(45),
                         field3 varchar(45),
                         PRIMARY KEY(field2, field3)
                     );
                     *We can add the Syntax :ALTER TABLE table_name add primary key(field3, field4);  to add ALTER Query
                     in a table that is already created.
JDBC connection:
                     *Java DataBase Connectivity is an API that manages connection of Java programs with database
                     using queries and commands.
                     *JDBC consists of two layers namely JDBC API and JDBC Driver.
                     *JDBC API is used for communicating a java program with JDBC manager and JDBC Driver helps to communicate
                     with the database.
                     *The steps involved in doing a JDBC Connection is 1.create table in a database 2.Loading and Registering
                     Drivers 3.Creating Connection 4.Creating Statements 5.Executing the Query 6. Processing the results7.Closing
                     the connection.
                     *The Driver class that is used as default is com.mysql.cj.jdbc.driver.
                     *The whole connection process is done with the help of built in classes and functions
                     available in java.sql package.
 JPA:
                     *JPA(Java Persistence Api) is a specification that helps in object relational mapping of relational
                     data in java applications ie) instead of using sql statements it helps in handling directly with
                     objects.
                     *JPA acts as an interlink between objects in java programming model and relational database systems.
                     *Being a specification,it needs an implementaion,so ORM tools like Hibernate,iBatis and Toplink
                     implements JPA .
                     *JPA Object Relational Mapping maps a Java object with a Database coloumn.Hibernate,iBatis and Toplink etc..
                     are some frameworks that function in ORM mechanism.
       Mapping Directions:
                     *Unidirectional Relationship:Only one entity can refer the properties to another(ie)one owning side.)
                     *Bidirectional Relationship:Every Entity can refer the properties to another.ie) there will be one owning
                     side and one inverse side.
       Types of ORM Mappings:
                    *One to One:An instance of an Entity can refer to the properties of only one instance of another Entity.
                    Represented by @OneToOne annotation.
                    *One to Many:An Instance of one Entity can refer to the many instances of other entity.Represented by
                    @OneToMany annotation.
                    *Many to One: Many Instances of an entity can be referred to only one instance of other entity.
                    Represented by @ManyToOne annotation.
                    *Many to Many:multiple instances of an entity can be referred to many instances of other entity.
                    Represented by @ManyToMany annotation.
       JPA Entity:
                    *An Entity is an unit that comprisee  various states.It can be made to function as an object oriented
                    model when added behaviour.Entity consists certain properties such as
                      Persistbility:It can be stored in a database and accessed,retrieved.
                      Persistent identity:Each Entity is unique and has an object identity .Object Identity can be relatde to the concept
                      of primarykey in database.
                      Transactionality:Each Entity can perform CRUD operations and make changes in the database.
                      Granuality:Entities should not be primitives or primitive wrappers or built in objects.
                    *An Entity can be associated with some metadata that can be either in XML file form or Annotation form.
       Creating an Entity:
                    *A Java class can be converted into an Entity by Creating a No-Argument Constructor and Annotation.
                    *A java class can be converted into an Entity by using @Entity snd @id annotation.
       Entity Manager:
                    *Instance referred by an Entity is managed by Entity manager.
                    *Entity manager is used to read,write,delete an entity.Entity manager is the implementation of Api.
       Steps to persist an Entity Object:
                    *Entity Manager Factory is an interface that provides an Entity Manager.The interface is present in
                    java.persistence package.
                    *Example: EntityManagerFactory emf=Persistence.createEntityManagerFactory("entity name");
                        where persistence is the bootstrap class that provides EntityManagerFactory interface and createEntityManagerFactory
                        method is used to create and return entitymanager factory for the named persistence unit.this method contains the
                        name of the persistance unit specified in persisitence.xml file.
                    *getTransaction() method - This method returns the resource-level EntityTransaction object.
                     begin() method - This method is used to start the transaction.
                     em.persist(s1);
                     persist() - This method is used to make an instance managed and persistent. An entity instance is passed within this method.
                     5) Closing the transaction

                     em.getTransaction().commit();
                     6) Releasing the factory resources.

                     emf.close();
                         em.close();
                     close() - This method is used to releasing the factory resources.

    Reference:
    1.https://www.javatpoint.com/mysql-tutorial
    2.https://www.youtube.com/watch?v=8ClTqxa6iAk
    3.https://www.youtube.com/watch?v=Z7bX3xM5ySQ
    4.https://www.youtube.com/watch?v=ySlWh3JT1L0
    5.https://www.geeksforgeeks.org/java-program-to-insert-details-in-a-table-using-jdbc/
    6.https://www.baeldung.com/java-connect-mysql
    7.https://www.javatpoint.com/example-to-connect-to-the-mysql-database
    8.https://www.infoworld.com/article/3388036/what-is-jdbc-introduction-to-java-database-connectivity.html
    9.https://www.codejava.net/java-se/jdbc/jdbc-tutorial-sql-insert-select-update-and-delete-examples
    10.https://hevodata.com/learn/rest-api-to-mysql-2-easy-methods/
    11.https://www.javatpoint.com/example-to-connect-to-the-mysql-database
    12.https://thorben-janssen.com/mapping-definitions-jpa-hibernate-annotations-xml/#:~:text=As%20you've%20seen%2C%20JPA,file%20attribute%20in%20the%20persistence.
    13.https://www.javatpoint.com/jpa-tutorial